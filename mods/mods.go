package mods

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/spf13/viper"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Openweather API
type weatherAPIResponse struct {
	Current current `json:"current"`
	Daily   []day   `json:"daily"`
	Hourly  []hour  `json:"hourly"`
}

type current struct {
	Sunrise    int           `json:"sunrise"`
	Sunset     int           `json:"sunset"`
	Temp       float32       `json:"temp"`
	Feels_like float32       `json:"feels_like"`
	Humidity   int           `json:"humidity"`
	Wind_speed float32       `json:"wind_speed"`
	Weather    []weatherInfo `json:"weather"`
}

type day struct {
	Dt         int64         `json:"dt"`
	Sunrise    int           `json:"sunrise"`
	Sunset     int           `json:"sunset"`
	Temp       temp          `json:"temp"`
	Feels_like temp          `json:"feels_like"`
	Wind_speed float32       `json:"wind_speed"`
	Weather    []weatherInfo `json:"weather"`
	Humidity   int           `json:"humidity"`
}

type hour struct {
	Dt         int64         `json:"dt"`
	Temp       float32       `json:"temp"`
	Feels_like float32       `json:"feels_like"`
	Humidity   int           `json:"humidity"`
	Wind_speed float32       `json:"wind_speed"`
	Weather    []weatherInfo `json:"weather"`
}

type temp struct {
	Day     float32 `json:"day"`
	Night   float32 `json:"night"`
	Evening float32 `json:"eve"`
	Morning float32 `json:"morn"`
}

type weatherInfo struct {
	Description string `json:"description"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Open-Meteo API

type openMeteoResponse struct {
	Error  bool            `json:"error"`
	Hourly openMeteoHourly `json:"hourly"`
}

type openMeteoHourly struct {
	Temperature []float32 `json:"temperature_2m"`
	Humidity    []int     `json:"relativehumidity_2m"`
	Feels_like  []float32 `json:"apparent_temperature"`
	Wind_speed  []float32 `json:"windspeed_10m"`
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Å–≤–µ—Ç–µ –∏ –∑–∞–∫–∞—Ç–µ
func SendSunInfo(botUrl string, chatId int) {

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ json'a
	lat, lon, err := getCoordinates(chatId)
	if err != nil {
		SendMsg(botUrl, chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /set")
		return
	}

	// –°—Å—ã–ª–∫–∞ –∫ –∞–ø–∏ –ø–æ–≥–æ–¥—ã
	resp, err := http.Get("https://api.openweathermap.org/data/2.5/onecall?lat=" + lat + "&lon=" + lon + "&lang=ru&exclude=minutely,hourly,daily,alerts&units=metric&appid=" + viper.GetString("weatherToken"))
	if err != nil {
		log.Printf("http.Get error: %s", err)
		SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		return
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	if resp.StatusCode != 200 {
		SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	body, _ := ioutil.ReadAll(resp.Body)
	var rs = new(weatherAPIResponse)
	json.Unmarshal(body, &rs)

	// –í—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	SendMsg(botUrl, chatId, "üåÑ –í–æ—Å—Ö–æ–¥ –∏ –∑–∞–∫–∞—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üåÑ"+
		"\nüåÖ –í–æ—Å—Ö–æ–¥ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤ "+time.Unix(int64(rs.Current.Sunrise), 0).Add(3*time.Hour).Format("15:04:05")+
		"\nüåá –ê –∑–∞–∫–∞—Ç –≤ "+time.Unix(int64(rs.Current.Sunset), 0).Add(3*time.Hour).Format("15:04:05"))

}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
func SendDailyWeather(botUrl string, chatId int, days int) {

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ json'a
	lat, lon, err := getCoordinates(chatId)
	if err != nil {
		SendMsg(botUrl, chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /set")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API
	resp, err := http.Get("https://api.openweathermap.org/data/2.5/onecall?lat=" + lat + "&lon=" + lon + "&lang=ru&exclude=minutely,current,minutely,alerts&units=metric&appid=" + viper.GetString("weatherToken"))
	if err != nil {
		log.Printf("http.Get error: %s", err)
		SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		return
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	if resp.StatusCode != 200 {
		SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	body, _ := ioutil.ReadAll(resp.Body)
	var rs = new(weatherAPIResponse)
	json.Unmarshal(body, &rs)

	// –í—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	for n := 1; n < days+1; n++ {
		SendMsg(botUrl, chatId, "–ü–æ–≥–æ–¥–∞ –Ω–∞ "+time.Unix(rs.Daily[n].Dt, 0).Format("02/01/2006")+":"+
			"\n----------------------------------------------"+
			"\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: "+strconv.Itoa(int(rs.Daily[n].Temp.Morning))+"¬∞"+" -> "+strconv.Itoa(int(rs.Daily[n].Temp.Evening))+"¬∞"+
			"\nü§î–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: "+strconv.Itoa(int(rs.Daily[n].Feels_like.Morning))+"¬∞"+" -> "+strconv.Itoa(int(rs.Daily[n].Feels_like.Evening))+"¬∞"+
			"\nüí®–í–µ—Ç–µ—Ä: "+strconv.Itoa(int(rs.Daily[n].Wind_speed))+" –º/—Å"+
			"\nüíß–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: "+strconv.Itoa(rs.Daily[n].Humidity)+"%"+
			"\n----------------------------------------------")
	}

}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
func SendCurrentWeather(botUrl string, chatId int) {

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ json'a
	lat, lon, err := getCoordinates(chatId)
	if err != nil {
		SendMsg(botUrl, chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /set")
		return
	}

	// –°—Å—ã–ª–∫–∞ –∫ –∞–ø–∏ –ø–æ–≥–æ–¥—ã
	resp, err := http.Get("https://api.openweathermap.org/data/2.5/onecall?lat=" + lat + "&lon=" + lon + "&lang=ru&exclude=minutely,hourly,daily,alerts&units=metric&appid=" + viper.GetString("weatherToken"))
	if err != nil {
		log.Printf("http.Get error: %s", err)
		SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		return
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å–ø–æ–Ω—Å–∞
	if resp.StatusCode != 200 {
		SendMsg(botUrl, chatId, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		return
	}

	// –ó–∞–ø–∏—Å—å —Ä–µ—Å–ø–æ–Ω—Å–∞
	body, _ := ioutil.ReadAll(resp.Body)
	var rs = new(weatherAPIResponse)
	json.Unmarshal(body, &rs)

	// –í—ã–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	SendMsg(botUrl, chatId, "–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"+":"+
		"\n----------------------------------------------"+
		"\nüå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: "+strconv.Itoa(int(rs.Current.Temp))+
		"\nü§î–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: "+strconv.Itoa(int(rs.Current.Feels_like))+"¬∞"+
		"\nüí®–í–µ—Ç–µ—Ä: "+strconv.Itoa(int(rs.Current.Wind_speed))+" –º/—Å"+
		"\nüíß–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: "+strconv.Itoa(rs.Current.Humidity)+"%"+
		"\n----------------------------------------------")

}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
func Help(botUrl string, chatId int) {
	SendMsg(botUrl, chatId, "–ö–æ–º–∞–Ω–¥—ã: \n"+
		"/set - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n"+
		"/weather - –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –¥–≤–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–Ω—è\n"+
		"/current - –ø–æ–≥–æ–¥–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"+
		"/week - –ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π\n"+
		"/sun - –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
}

// –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
func SetPlace(botUrl string, chatId int, lat, lon string) {

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä
	if lat == "" || lon == "" {
		SendMsg(botUrl, chatId, "–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —à–∞–±–ª–æ–Ω–æ–º –Ω–∏–∂–µ:\n\n/set 55.5692101 37.4588852")
		return
	}

	// –û—Ç–∫—Ä—ã—Ç–∏–µ json —Ñ–∞–π–ª–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	file, err := os.Open("weather/coordinates.json")
	if err != nil {
		log.Fatalf("Unable to open file: %v", err)
		return
	}
	defer file.Close()

	// –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞—Ä—Ç—É
	var m map[string]string
	body, _ := ioutil.ReadAll(file)
	json.Unmarshal(body, &m)

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
	m[strconv.Itoa(chatId)] = lat + " " + lon

	// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
	fileU, err := os.Create("weather/coordinates.json")
	if err != nil {
		log.Fatalf("Unable to create file: %v", err)
		return
	}
	defer fileU.Close()

	// –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ json
	result, _ := json.Marshal(m)
	fileU.Write(result)

	SendMsg(botUrl, chatId, "–ó–∞–ø–∏—Å–∞–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!")
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
func getCoordinates(chatId int) (string, string, error) {

	// –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ json —Ñ–∞–π–ª–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
	file, err := os.Open("weather/coordinates.json")
	if err != nil {
		log.Fatalf("Unable to open file: %v", err)
		return "", "", err
	}
	defer file.Close()

	// –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	var m map[string]string
	body, _ := ioutil.ReadAll(file)
	json.Unmarshal(body, &m)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	coords := strings.Fields(m[strconv.Itoa(chatId)])

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	latFloat, err := strconv.ParseFloat(coords[0], 64)
	if err != nil || !(latFloat > -90 && latFloat < 90) {
		return "", "", err
	}
	lonFloat, err := strconv.ParseFloat(coords[1], 64)
	if err != nil || !(lonFloat > -180 && lonFloat < 180) {
		return "", "", err
	}

	return coords[0], coords[1], nil
}
